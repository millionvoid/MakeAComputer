`timescale 1ns / 1ps
module tb;

wire clk_50M, clk_11M0592;

reg clock_btn = 0;         //BTN5????????®¨?????°Ï?????????°Ï???????????????????????°ÏC??????°Ï?°Ï??®®??????????????????1
reg reset_btn = 0;         //BTN6????????®¨??°ß°ß?????????°Ï???????????????????????°ÏC??????°Ï?°Ï??®®??????????????????1

reg[3:0]  touch_btn;  //BTN1~BTN4????????°Ï?????????????????????????????1
reg[31:0] dip_sw;     //32???????®¨??????????????????®¨????????ON???????????1

wire[15:0] leds;       //16???LED????°Ï?°Ï???????????1??????
wire[7:0]  dpy0;       //???????????????????????®®?????????????????????????°Ï?°Ï???????1??????
wire[7:0]  dpy1;       //???????????°Ï?????????????®®?????????????????????????°Ï?°Ï???????1??????

wire txd;  //????°Ï?°Ï?????????????°Ï??????
wire rxd;  //????°Ï?°Ï???????????????????

wire[31:0] base_ram_data; //BaseRAM?????????????8??????CPLD?????????°ß????????®¨????????
wire[19:0] base_ram_addr; //BaseRAM????????
wire[3:0] base_ram_be_n;  //BaseRAM?????°Ï?°Ï??????°Ï?°Ï?????????????????????????????????????®¨?????°Ï?°Ï??????°Ï?°Ï??????°Ï?°Ï???®®?????????0
wire base_ram_ce_n;       //BaseRAM?????°Ï?????????????????
wire base_ram_oe_n;       //BaseRAM?°Ï?°Ï??????°Ï?°Ï???????????????
wire base_ram_we_n;       //BaseRAM???????°Ï?°Ï???????????????

wire[31:0] ext_ram_data; //ExtRAM???????
wire[19:0] ext_ram_addr; //ExtRAM????????
wire[3:0] ext_ram_be_n;  //ExtRAM?????°Ï?°Ï??????°Ï?°Ï?????????????????????????????????????®¨?????°Ï?°Ï??????°Ï?°Ï??????°Ï?°Ï???®®?????????0
wire ext_ram_ce_n;       //ExtRAM?????°Ï?????????????????
wire ext_ram_oe_n;       //ExtRAM?°Ï?°Ï??????°Ï?°Ï???????????????
wire ext_ram_we_n;       //ExtRAM???????°Ï?°Ï???????????????

wire [22:0]flash_a;      //Flash???????????a0????????®¨8bit???®¨??????????????16bit???®¨??????????????
wire [15:0]flash_d;      //Flash???????
wire flash_rp_n;         //Flash??°ß°ß???????????®®?????????????
wire flash_vpen;         //Flash?????????°ß°ß???????®®??????????????????????°Ï?°Ï????????°Ï???°ß°ß???????°ß????
wire flash_ce_n;         //Flash?????°Ï???????????®®?????????????
wire flash_oe_n;         //Flash?°Ï?°Ï??????°Ï?°Ï?????????®®?????????????
wire flash_we_n;         //Flash???????°Ï?°Ï?????????®®?????????????
wire flash_byte_n;       //Flash 8bit???®¨?????°Ï?????????????????????????????®¨?????????®¨flash???16??????®¨?????????°Ï?°Ï???®®?°Ï?°Ï?????1

//Windows?°Ï????°Ï?°Ï??????®¨????°Ï?°Ï??®®????????°Ï????????????°Ï?°Ï???????????????"D:\\foo\\bar.bin"
parameter BASE_RAM_INIT_FILE = "/tmp/main.bin"; //BaseRAM?????°ß?????°ÏC??°ÏC????????°Ï?°Ï???®®???????????????°Ï??????????????°Ï?°Ï??®®????
parameter EXT_RAM_INIT_FILE = "/tmp/eram.bin";    //ExtRAM?????°ß?????°ÏC??°ÏC????????°Ï?°Ï???®®???????????????°Ï??????????????°Ï?°Ï??®®????
parameter FLASH_INIT_FILE = "/tmp/kernel.elf";    //Flash?????°ß?????°ÏC??°ÏC????????°Ï?°Ï???®®???????????????°Ï??????????????°Ï?°Ï??®®????

assign rxd = 1'b1; //idle state

reg ram_data=32'h30;
assign base_ram_data=ram_data;

initial begin 
    //????®¨?°Ï?°Ï???°Ï??????????°Ï?°Ï?????????????°Ï?°Ï???°Ï?°Ï???????????????????????????
    dip_sw = 32'h1;
    touch_btn = 0;
    for (integer i = 0; i < 20; i = i++) begin
        #100; //????????100ns
        clock_btn = 1; //??????????????®®??????°Ï?????????°Ï????
        #100; //????????100ns
        clock_btn = 0; //??????????????®®??????°Ï?????????°Ï????
    end
end

thinpad_top dut(
    .clk_50M(clk_50M),
    .clk_11M0592(clk_11M0592),
    .clock_btn(clock_btn),
    .reset_btn(reset_btn),
    .touch_btn(touch_btn),
    .dip_sw(dip_sw),
    .leds(leds),
    .dpy1(dpy1),
    .dpy0(dpy0),
    .txd(txd),
    .rxd(rxd),
    .uart_dataready(1),
    .uart_tsre(1),
    .uart_tbre(1),
    .base_ram_data(base_ram_data),
    .base_ram_addr(base_ram_addr),
    .base_ram_ce_n(base_ram_ce_n),
    .base_ram_oe_n(base_ram_oe_n),
    .base_ram_we_n(base_ram_we_n),
    .base_ram_be_n(base_ram_be_n),
    .ext_ram_data(ext_ram_data),
    .ext_ram_addr(ext_ram_addr),
    .ext_ram_ce_n(ext_ram_ce_n),
    .ext_ram_oe_n(ext_ram_oe_n),
    .ext_ram_we_n(ext_ram_we_n),
    .ext_ram_be_n(ext_ram_be_n),
    .flash_d(flash_d),
    .flash_a(flash_a),
    .flash_rp_n(flash_rp_n),
    .flash_vpen(flash_vpen),
    .flash_oe_n(flash_oe_n),
    .flash_ce_n(flash_ce_n),
    .flash_byte_n(flash_byte_n),
    .flash_we_n(flash_we_n)
);
clock osc(
    .clk_11M0592(clk_11M0592),
    .clk_50M    (clk_50M)
);
sram_model base1(/*autoinst*/
            .DataIO(base_ram_data[15:0]),
            .Address(base_ram_addr[19:0]),
            .OE_n(base_ram_oe_n),
            .CE_n(base_ram_ce_n),
            .WE_n(base_ram_we_n),
            .LB_n(base_ram_be_n[0]),
            .UB_n(base_ram_be_n[1]));
sram_model base2(/*autoinst*/
            .DataIO(base_ram_data[31:16]),
            .Address(base_ram_addr[19:0]),
            .OE_n(base_ram_oe_n),
            .CE_n(base_ram_ce_n),
            .WE_n(base_ram_we_n),
            .LB_n(base_ram_be_n[2]),
            .UB_n(base_ram_be_n[3]));
sram_model ext1(/*autoinst*/
            .DataIO(ext_ram_data[15:0]),
            .Address(ext_ram_addr[19:0]),
            .OE_n(ext_ram_oe_n),
            .CE_n(ext_ram_ce_n),
            .WE_n(ext_ram_we_n),
            .LB_n(ext_ram_be_n[0]),
            .UB_n(ext_ram_be_n[1]));
sram_model ext2(/*autoinst*/
            .DataIO(ext_ram_data[31:16]),
            .Address(ext_ram_addr[19:0]),
            .OE_n(ext_ram_oe_n),
            .CE_n(ext_ram_ce_n),
            .WE_n(ext_ram_we_n),
            .LB_n(ext_ram_be_n[2]),
            .UB_n(ext_ram_be_n[3]));
x28fxxxp30 #(.FILENAME_MEM(FLASH_INIT_FILE)) flash(
    .A(flash_a[1+:22]), 
    .DQ(flash_d), 
    .W_N(flash_we_n),    // Write Enable 
    .G_N(flash_oe_n),    // Output Enable
    .E_N(flash_ce_n),    // Chip Enable
    .L_N(1'b0),    // Latch Enable
    .K(1'b0),      // Clock
    .WP_N(flash_vpen),   // Write Protect
    .RP_N(flash_rp_n),   // Reset/Power-Down
    .VDD('d3300), 
    .VDDQ('d3300), 
    .VPP('d1800), 
    .Info(1'b1));

initial begin 
    wait(flash_byte_n == 1'b0);
    $display("8-bit Flash interface is not supported in simulation!");
    $display("Please tie flash_byte_n to high");
    $stop;
end

initial begin 
    reg [31:0] tmp_array[0:1048575];
    integer n_File_ID, n_Init_Size;
    n_File_ID = $fopen(BASE_RAM_INIT_FILE, "rb");
    if(!n_File_ID)begin 
        n_Init_Size = 0;
        $display("Failed to open BaseRAM init file");
    end else begin
        n_Init_Size = $fread(tmp_array, n_File_ID);
        n_Init_Size /= 4;
        $fclose(n_File_ID);
    end
    $display("BaseRAM Init Size(words): %d",n_Init_Size);
    for (integer i = 0; i < n_Init_Size; i++) begin
        base1.mem_array0[i] = tmp_array[i][24+:8];
        base1.mem_array1[i] = tmp_array[i][16+:8];
        base2.mem_array0[i] = tmp_array[i][8+:8];
        base2.mem_array1[i] = tmp_array[i][0+:8];
    end
end

initial begin 
    reg [31:0] tmp_array[0:1048575];
    integer n_File_ID, n_Init_Size;
    n_File_ID = $fopen(EXT_RAM_INIT_FILE, "rb");
    if(!n_File_ID)begin 
        n_Init_Size = 0;
        $display("Failed to open ExtRAM init file");
    end else begin
        n_Init_Size = $fread(tmp_array, n_File_ID);
        n_Init_Size /= 4;
        $fclose(n_File_ID);
    end
    $display("ExtRAM Init Size(words): %d",n_Init_Size);
    for (integer i = 0; i < n_Init_Size; i++) begin
        ext1.mem_array0[i] = tmp_array[i][24+:8];
        ext1.mem_array1[i] = tmp_array[i][16+:8];
        ext2.mem_array0[i] = tmp_array[i][8+:8];
        ext2.mem_array1[i] = tmp_array[i][0+:8];
    end
end

//reg clk;
//reg [5:0]ReadRegA;
//reg [5:0]ReadRegB;
//reg [31:0]NPCInput;
//reg [5:0]WriteReg;
//reg [31:0]WriteData;
//reg RegWrite;
//reg [31:0]ReadDataA;
//reg [31:0]ReadDataB;

//--------------------RegisterFile test------------------------
//initial begin
//    RegWrite=1;
//    clk=0;
//    forever #1 clk= ~ clk;
//end
//initial begin
//    #10 WriteReg=23;
//    WriteData=46;
//    #10 WriteReg=3;
//    WriteData=6;
//    ReadRegA=23;
//    #10 WriteReg=0;
//    WriteData=5;
//    ReadRegA=3;
//    #10 ReadRegA=0;                                       
//end

//RegisterFile c(
//    .clk(clk),
//    .ReadRegA(ReadRegA),
//    .ReadRegB(ReadRegB),
//    .NPCInput(NPCInput),
//    .WriteReg(WriteReg),
//    .WriteData(WriteData),
//    .RegWrite(RegWrite),
//    .ReadDataA(ReadDataA),
//    .ReadDataB(ReadDataB)
//);
//--------------------RegisterFile test------------------------

//--------------------MOVZController test------------------------
//reg [31:0]EXOutput;
//reg IDEXIsMOVZ;
//reg IDEXRegWrite;
//reg EXRegWrite;
//initial begin
//    IDEXRegWrite=1;
//    IDEXIsMOVZ=0;
//    EXOutput=35;
//    #1 IDEXRegWrite=0;
//    #1 IDEXRegWrite=1;
//    #1 IDEXIsMOVZ=1;
//    #1 EXOutput=0;
//end
//MOVZController MOVZController_c(
//    .EXResult(EXOutput),
//    .IsMOVZ(IDEXIsMOVZ),
//    .OldRegWrite(IDEXRegWrite),
//    .NewRegWrite(EXRegWrite)
//);
//--------------------MOVZController test------------------------

//--------------------BranchSelector test------------------------
//reg [31:0]EXRegA;
//reg [31:0]EXRegB;
//reg [1:0]IDEXBranchType;
//reg [1:0]IDEXJumpType;
//reg EXBranchSelect;
//reg EXBranchHappen;
//initial begin
//    EXRegA=1;
//    EXRegB=2;
//    IDEXBranchType=0;
//    IDEXJumpType=0;
//    #1 EXRegB=2;
//    IDEXBranchType=2;
//    #1 EXRegA=1;
//    EXRegB=1;
//    #1 IDEXBranchType=1;
//    #1 EXRegB=2;
//    IDEXBranchType=3;
//    #1 EXRegB=-2;
//    #1 EXRegA=-1;
//    #1 IDEXBranchType=0;
//    IDEXJumpType=1;
//end
//BranchSelector BranchSelector_c(
//    // input
//    .BranchType(IDEXBranchType),
//    .JumpType(IDEXJumpType),
//    .EXRegA(EXRegA),
//    .EXRegB(EXRegB),
    
//    // output
//    .BranchSelect(EXBranchSelect),
//    .BranchHappen(EXBranchHappen)
//);
//--------------------BranchSelector test------------------------

endmodule